#!/bin/bash
#
# Caddy Web Server Installer
# https://github.com/sayem314/Caddy-Web-Server-Installer
#

# Global config
caddyname="Caddy Web Server"
caddypath="/opt/caddyserver"
caddyuser="caddy"
caddyfile="/etc/Caddyfile"
caddywww="/var/caddywww"
caddylog="/var/log/caddy"
cwsiv="v3.9 beta (13 Aug 2016)"

if [[ -e "/var/run/caddy/caddy.pid" ]]; then
	pids="`cat /var/run/caddy/caddy.pid`"
else
	pids=`ps aux | grep $caddypath/caddy | grep -v grep | awk '{ print $2 }'`
fi

about () {
	echo ""
	echo "  ========================================================= "
	echo "  \             Caddy Web Server Installer                / "
	echo "  \               $cwsiv                 / "
	echo "  \             Created by Sayem Chowdhury                / "
	echo "  \             Caddy Web: Caddyserver.com                / "
	echo "  ========================================================= "
	echo ""
}

howto () {
	echo "  Welcome!"
	echo "  run $(tput setaf 3)caddy help $(tput sgr0) for help"
	echo ""
}

prms () {
	echo ""
	echo "  caddy start          - Start $caddyname"
	echo "  caddy stop           - Stop/Shutdown $caddyname"
	echo "  caddy restart        - Restart $caddyname"
	echo "  caddy status         - Check $caddyname running or not"
	echo "  caddy install        - Install $caddyname on fresh OS"
	echo "  caddy edit           - Edit Caddyfile using the default editor" 
	echo "  caddy service        - Make $caddyname a service (upstart/systemd)"
	echo "  caddy update         - Update $caddyname"
	echo "  caddy delete         - Uninstall Caddy and data."
	echo "  caddy about          - About Caddy Web Server Installer"
	echo ""
}

startcaddy () {
	pids=`ps aux | grep $caddypath/caddy | grep -v grep | awk '{ print $2 }'`
	caddypid="/var/run/caddy"
	if [[ ! -f $caddypid ]]; then
		mkdir -p $caddypid
		chown $caddyuser $caddypid
	fi
	if [ -z "$pids" ] ; then
		echo ""
		if [[ -e /etc/init/caddy.conf || -e /etc/systemd/system/caddy.service ]]; then
			service caddy start
		else
			echo -n "  Starting $caddyname..."
			sudo -H -u $caddyuser $caddypath/caddy -conf="$caddyfile" -quiet=true -pidfile=/var/run/caddy/caddy.pid &
			echo "  $(tput setaf 2)DONE$(tput sgr0)"
		fi
		restartphpfpm;
		echo ""
	else
		echo ""
		echo "  $caddyname is already $(tput setaf 2)running$(tput sgr0) on: $pids (PID)"
		echo ""
	fi
}

stopcaddy () {
	if [ -z "$pids" ] ; then
		echo ""
		echo "  $caddyname is $(tput setaf 1)NOT running$(tput sgr0)"
		echo ""
	else
		echo ""
		if [[ -e /etc/init/caddy.conf || -e /etc/systemd/system/caddy.service ]]; then
			service caddy stop
		else
			echo -n "  Shutting down $caddyname..."
			kill $pids
			rm -f $pids
			echo "  $(tput setaf 2)DONE$(tput sgr0)"
		fi
		echo ""
	fi
}

caddystatus () {
	if [[ ! -e $caddypath/caddy ]]; then
	echo ""
	echo "  Caddy is not installed."
	echo "  run $(tput setaf 3)caddy install$(tput sgr0) to install $caddyname"
	echo ""
	exit
	fi
	#Detect Caddy process
	if [ -z "$pids" ] ; then
		echo ""
		echo "  $caddyname is $(tput setaf 1)NOT running$(tput sgr0)"
		echo ""
	else
		caddymemusage=`ps axo rss,comm,pid | grep $pids | awk '{$1/=1024;printf "%.0fMB\t",$1}{print $2}' | awk '{print $1}'`
		secs="`ps -p $pids -oetime= | tr '-' ':' | awk -F: '{ total=0; m=1; } { for (i=0; i < NF; i++) {total += $(NF-i)*m; m *= i >= 2 ? 24 : 60 }} {print total}'`"
		if [[ $secs -lt 120 ]]; then
			caddyuptime="$secs seconds"
		elif [[ $secs -lt 3600 ]]; then
			caddyuptime="`printf '%d minutes %d seconds\n' $(($secs%3600/60)) $(($secs%60))`"
		elif [[ $secs -lt 86400 ]]; then
			caddyuptime="`printf '%d hrs %d min %d sec\n' $(($secs/3600)) $(($secs%3600/60)) $(($secs%60))`"
		else
			caddyuptime="`echo $((secs/86400))" days, "$(date -d "1970-01-01 + $secs seconds" "+%H hrs %M min %S sec")`"
		fi
		echo ""
		echo "  $caddyname is $(tput setaf 2)running$(tput sgr0)"
		echo "  Caddy (PID: $pids) is using $caddymemusage RAM"
		echo "  System free RAM $(free -t -h | egrep Mem | awk '{print $4}')B"
		echo "  Uptime - $caddyuptime"
		echo ""
	fi
}

amiroot () {
	if [[ "$EUID" -ne 0 ]]; then
		echo "  Sorry, you need to run this as root"
		exit
	fi
}

installcaddy () {
	echo ""
	#Detetcting Caddy installed or not
	if [[ -e "$caddypath/caddy" ]]; then
		echo "  $caddyname is already installed on"
		echo "  $caddypath/caddy"
		echo ""
		exit;
	fi

	#Detect architecture
	if [ -n "$(uname -m | grep 64)" ]; then
		cpubits="arch=amd64"
		cpubitsname="for (64bit)..."
	elif [ -n "$(uname -m | grep 86)" ]; then
		cpubits="arch=386"
		cpubitsname="for (32bit)..."
	elif [ -n "$(uname -m | grep armv5)" ]; then
		cpubits="arch=arm&arm=5"
		cpubitsname="for (ARM 5)..."
	elif [ -n "$(uname -m | grep armv6l)" ]; then
		cpubits="arch=arm&arm=6"
		cpubitsname="for (ARM 6)..."
	elif [ -n "$(uname -m | grep armv7l)" ]; then
		cpubits="arch=arm&arm=7"
		cpubitsname="for (ARM 7)..."
	else
		echo ""
		echo "  unsupported or unknown architecture"
		echo ""
		exit;
	fi

	nocert="--no-check-certificate"

	#Installing Caddy
	echo -n "  Downloading $caddyname $cpubitsname" #Caddy linux
	wget -q $nocert "https://caddyserver.com/download/build?os=linux&$cpubits&features=" -O "caddy_linux_custom.tar.gz"
	echo "  $(tput setaf 2)DONE$(tput sgr0)"

	#Creating folders
	echo ""
	mkdir -p $caddypath
	mkdir -p $caddylog
	
	#Extract Caddy on created folder
	echo -n "  Extracting $caddyname to $caddypath..."
	tar xzf caddy_linux_custom.tar.gz -C $caddypath #Extracting Caddy
	echo " $(tput setaf 2)DONE$(tput sgr0)"
	rm -rf caddy_linux_custom.tar.gz #Deleting Caddy archive
	echo ""
	installphp;

	#Creating non-root user
	useradd -r -d $caddypath -s /bin/false $caddyuser
	chown $caddyuser $caddypath
	chown $caddyuser $caddylog

	#Port setup
	APT_GET_CMD="/usr/bin/apt-get"
	echo -n "  Binding port..."
	if [[ ! -z $APT_GET_CMD ]]; then
		apt-get install libcap2-bin -y &>/dev/null
	fi
	setcap cap_net_bind_service=+ep $caddypath/caddy &>/dev/null
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
}

installphp () {
	if [[ -e  "$caddypath" ]] ; then
		read -r -p "  Would you like to install php? [y/N]: " option
		case $option in
		[yY][eE][sS]|[yY])
			#Installing required php files
			echo -n "  Installing required php files..."

			#Detecting apt-get/yum
			YUM_CMD=$(which yum)
  			APT_GET_CMD="/usr/bin/apt-get"
			if [[ ! -z $APT_GET_CMD ]]; then
				CODENAME=`cat /etc/*-release | grep "VERSION="`
				CODENAME=${CODENAME##*\(}
				CODENAME=${CODENAME%%\)*}
			fi

			#Setup PHP
			if [[ "$CODENAME" == "Xenial Xerus" || "$CODENAME" == "Yakkety Yak" ]]; then
				PHP="php7.0"
			else
				PHP="php5"
			fi

			#Install PHP
			if [[ ! -z $YUM_CMD ]]; then
				yum update -y &>/dev/null && yum install sed php-fpm php-cli php-curl curl sudo -y &>/dev/null
				echo "  $(tput setaf 2)DONE$(tput sgr0)"
 			elif [[ ! -z $APT_GET_CMD ]]; then
				apt-get update -y &>/dev/null && apt-get install sed $PHP-fpm $PHP-cli $PHP-curl curl sudo -y &>/dev/null
				echo "  $(tput setaf 2)DONE$(tput sgr0)"
   			else
				echo "  $(tput setaf 1)FAILED$(tput sgr0)"
 			fi
			fixphpfpm;
		;;
		*)
          echo "  php not installed! "
          ;;
		esac
		else
		echo "  Looks like Caddy is not installed"
	fi
}

fixphpfpm () {
	nocert="--no-check-certificate"
	ubuntuphp5fpm="/etc/php5/fpm/pool.d/www.conf"
	centosphpfpm="/etc/php/fpm/pool.d/www.conf"
	centosphpfpm2="/etc/php-fpm.d/www.conf"
	phpfpm7="/etc/php/7.0/fpm/pool.d/www.conf"

	#Detect php5-fpm or php-fpm
	#Ubuntu
	if [[ -e "$ubuntuphp5fpm" ]] ; then
	echo -n "  Fixing php..."
	sed -i 's/user = .*/user = caddy/g' $ubuntuphp5fpm
	sed -i 's/group = .*/group = caddy/g' $ubuntuphp5fpm
	echo "  $(tput setaf 2)DONE$(tput sgr0)"

	#CentOS
	elif [[ -e "$centosphpfpm" ]] ; then
	echo -n "  Fixing php..."
	sed -i 's/user = .*/user = caddy/g' $centosphpfpm
	sed -i 's/group = .*/group = caddy/g' $centosphpfpm
	echo "  $(tput setaf 2)DONE$(tput sgr0)"

	#CentOS 2
	elif [[ -e "$centosphpfpm2" ]] ; then
	echo -n "  Fixing php..."
	sed -i 's/user = .*/user = caddy/g' $centosphpfpm2
	sed -i 's/group = .*/group = caddy/g' $centosphpfpm2
	echo "  $(tput setaf 2)DONE$(tput sgr0)"

	#PHP 7
	elif [[ -e "$phpfpm7" ]] ; then
	echo -n "  Fixing php..."
	sed -i 's/user = .*/user = caddy/g' $phpfpm7
	sed -i 's/group = .*/group = caddy/g' $phpfpm7
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	
	else
	echo -n "  Fixing php..."
	echo "  $(tput setaf 1)FAILED$(tput sgr0)"
	echo "  php not found!"
	echo ""
	fi
}

restartphpfpm () {
	ubuntuphp5fpm="/etc/php5/fpm/pool.d/www.conf"
	centosphpfpm="/etc/php/fpm/pool.d/www.conf"
	centosphpfpm2="/etc/php-fpm.d/www.conf"
	phpfpm7="/etc/php/7.0/fpm/pool.d/www.conf"

	#Ubuntu
	if [[ -e "$ubuntuphp5fpm" ]] ; then
	echo -n "  Restarting php5-fpm..."
	service php5-fpm restart

	#CentOS
	elif [[ -e "$centosphpfpm" || -e "$centosphpfpm2" ]] ; then
	echo -n "  Restarting php5-fpm..."
	service php-fpm restart

	#PHP 7
	elif [[ -e "$phpfpm7" ]] ; then
	echo -n "  Restarting php7.0-fpm..."
	/etc/init.d/php7.0-fpm reload
	
	fi
	echo ""
}

caddyfile () {
	#Detect php
	ubuntuphp5fpm="/etc/php5/fpm/pool.d/www.conf"
	centosphpfpm="/etc/php/fpm/pool.d/www.conf"
	centosphpfpm2="/etc/php-fpm.d/www.conf"
	phpfpm7="/etc/php/7.0/fpm/pool.d/www.conf"

	#Ubuntu
	if [[ -e "$ubuntuphp5fpm" ]] ; then
	phpsock="`cat $ubuntuphp5fpm | grep "listen = *" | cut -c 10-`"
	
	#CentOS
	elif [[ -e "$centosphpfpm" ]] ; then
	phpsock="`cat $centosphpfpm | grep "listen = *" | cut -c 10-`"

	#CentOS 2
	elif [[ -e "$centosphpfpm2" ]] ; then
	phpsock="`cat $centosphpfpm2 | grep "listen = *" | cut -c 10-`"

	#PHP 7
	elif [[ -e "$phpfpm7" ]] ; then
	sed -i 's/listen = .*/listen = 127.0.0.1:9000/g' $phpfpm7
	phpsock="`cat $phpfpm7 | grep "listen = *" | cut -c 10-`"
	
	else
	phpsock="127.0.0.1:9000"
	fi

	#Check if Caddyfile exist
	#Generate Caddyfile
	if [[ ! -e $caddyfile ]]; then
	echo ""
	echo "  Enter your domain name"
	echo "  Seperated by comma"
	read -p "  Domain name: " domainname
	echo ""
	echo "  Enter your email for automated ssl"
	read -p "  Email: " domainmail
	echo "$domainname {
tls $domainmail
root $caddywww
gzip
log $caddylog/access.log
errors $caddylog/error.log
fastcgi / $phpsock php
}" >> $caddyfile
	echo ""
	echo "  Caddyfile created"
	else
	echo "  Caddyfile found. Skip... "
	fi
	#Check if caddywww exist
	if [[ ! -e $caddywww ]]; then
	mkdir -p $caddywww
	chown $caddyuser $caddywww
	fi

	#Generate example html
	if [[ ! -e $caddywww/index.html ]]; then
	echo "<TITLE>Caddy Default Page</TITLE>

<h1><font color="green">It works!</font></h1>

<h3><font color="grey">This is the default welcome page used to test the correct operation of the Caddy web server after installation via Caddy Web Server Installer.</font></h3>

<h3><font color="grey">If you can read this page, it means that the Caddy web server installed at this site is working properly.<br>
You should <font color="#D03C3C">replace this file</font>
(located at <tt>$caddywww/index.html</tt>) before continuing to operate your server.</font></h3>
</hr>
<h3><font color="grey">If you are a normal user of this web site and don't know what this page is about, this probably means that the site is currently unavailable due to maintenance.</font></h3>" >> $caddywww/index.html
	echo "  index.html created"
	else
	echo "  index.html found. Skip ... "
	fi

	# phpinfo
	if [[ ! -e $caddywww/info.php ]]; then
		echo "<?php phpinfo(); ?>" >> $caddywww/info.php
		echo "  PHP-info file created"
		echo "  $caddywww/info.php"
	fi

	echo ""
	echo "  Done. Caddy has been installed :)"
	echo "  Run $(tput setaf 3)caddy start$(tput sgr0) to start $caddyname"
	echo ""

}

updatecaddy () {
	#Detetcting Caddy installed or not
	if [[ ! -e "$caddypath/caddy" ]]; then
		echo ""
		echo "  $caddyname is not installed"
		sleep 0.2
		echo "  run $(tput setaf 3)caddy install$(tput sgr0) to install $caddyname"
		echo ""
		exit;
	fi

	#Stop process
	if [ -e "/var/run/caddy/caddy.pid" ] ; then
		echo ""
		echo "  Found Caddy is running"
		stopcaddy;
	fi

	#Detect architecture
	if [ -n "$(uname -m | grep 64)" ]; then
		cpubits="arch=amd64"
		cpubitsname="for (64bit)..."
	elif [ -n "$(uname -m | grep 86)" ]; then
		cpubits="arch=386"
		cpubitsname="for (32bit)..."
	elif [ -n "$(uname -m | grep armv5)" ]; then
		cpubits="arch=arm&arm=5"
		cpubitsname="for (ARM 5)..."
	elif [ -n "$(uname -m | grep armv6l)" ]; then
		cpubits="arch=arm&arm=6"
		cpubitsname="for (ARM 6)..."
	elif [ -n "$(uname -m | grep armv7l)" ]; then
		cpubits="arch=arm&arm=7"
		cpubitsname="for (ARM 7)..."
	else
		echo "unsupported or unknown architecture"
		echo ""
		exit;
	fi

	nocert="--no-check-certificate"

	#Updating Caddy
	caddyserverversion=`$caddypath/caddy -version | awk '{print}'`
	echo ""
	echo "  Found $caddyserverversion"
	echo -n "  Downloading $caddyname $cpubitsname" #Caddy linux
	wget -q $nocert "https://caddyserver.com/download/build?os=linux&$cpubits&features=" -O "caddy_linux_custom.tar.gz"
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	sleep 0.1

	#Delete Caddy folder
	echo -n "  Removing Caddy directory $caddypath"
	sleep 0.3
	rm -rf $caddypath/*
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	sleep 0.1

	#Extract Caddy on created folder
	echo -n "  Extracting $caddyname to $caddypath"
	tar xzf caddy_linux_custom.tar.gz -C $caddypath #Extracting Caddy
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	setcap cap_net_bind_service=+ep $caddypath/caddy
	rm -rf caddy_linux_custom.tar.gz #Deleting Caddy archive
	echo ""
	echo "  Updated to $caddyserverversion"
	echo ""
}

makeservice () {
	nocert="--no-check-certificate"
	init=`cat /proc/1/comm`
	echo -n "  Creating service..."
	if [ "$init" == 'systemd' ]; then
		rm -f /etc/systemd/system/caddy.service
		echo "[Unit]
Description=Caddy HTTP/2 web server
After=network.target

[Service]
User=$caddyuser
Group=$caddyuser
Type=simple
ExecStart=$caddypath/caddy -conf=$caddyfile -quiet=true -pidfile=/var/run/caddy/caddy.pid
ExecStop=/bin/kill -USR1 $MAINPID
PIDFile=/var/run/caddy/caddy.pid

[Install]
WantedBy=multi-user.target" >> /etc/systemd/system/caddy.service
	chmod 0644 /etc/systemd/system/caddy.service
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	systemctl enable caddy
	else
		#Download
		wget -q $nocert "https://raw.githubusercontent.com/sayem314/Caddy-Web-Server-Installer/master/php-fpm/runcaddy.sh" -O "/etc/init.d/caddy.sh"
		chmod +x /etc/init.d/caddy.sh
		#Enable
		YUM_CMD=$(which yum)
  		APT_GET_CMD="/usr/bin/apt-get"
		if [[ ! -z $YUM_CMD ]]; then
			chkconfig caddy.sh on
			echo "  $(tput setaf 2)DONE$(tput sgr0)"
 		elif [[ ! -z $APT_GET_CMD ]]; then
 			echo "  $(tput setaf 2)DONE$(tput sgr0)"
			update-rc.d caddy.sh defaults
   		else
			echo "  $(tput setaf 1)FAILED$(tput sgr0)"
 		fi
	fi
}

deletecaddy () {
	if [[ -e  "$caddypath" ]] ; then
		echo ""
		echo "  Are you sure you want to uninstall Caddy web server? [y/N]"
		read -p "  Select an option: " option
		case $option in
			[yY][eE][sS]|[yY])
			stopcaddy;
			rm -rf $caddypath &>/dev/null #deleting caddy web server folder
			rm $caddyfile &>/dev/null #deleting caddyfile
			deletecaddydata;
			userdel $caddyuser #delete caddy user
			init=`cat /proc/1/comm`
			if [ "$init" == 'init' ]; then
				rm /etc/init/caddy.conf &>/dev/null
			elif [ "$init" == 'systemd' ]; then
				systemctl disable caddy &>/dev/null
				rm /etc/systemd/system/caddy.service &>/dev/null
			fi
			echo "  Caddy has been deleted"
			echo ""
			exit
			;;
			[nN][oO]|[nN]) exit;;
			*) echo ""; echo "  Incorrect input, try again! ";;
		esac
		else
		echo ""
		echo "  Looks like Caddy is not installed"
	fi
	echo ""
}

deletecaddydata () {
		read -r -p "  Would you also like to delete caddywww (data)? [y/N]: " option
		case $option in
		[yY][eE][sS]|[yY])
			echo -n "  Deleting caddywww (data)..."
			sleep 2
			rm -rf $caddywww #deleting caddy html folder
			echo "  $(tput setaf 2)DONE$(tput sgr0)"
		;;
		*)
          echo "  Removing caddywww (data)... $(tput setaf 5)Skipped$(tput sgr0)"
          ;;
		esac
}

versioninfo () {
	caddyserverversion=`$caddypath/caddy -version | awk '{print $2}'`
	phpversion=`php -v | grep cli`
	echo ""
	echo "  $caddyname $caddyserverversion"
	echo "  Caddy Web Server Installer - $cwsiv"
	echo "  $phpversion"
	echo ""
}

editcaddyfile (){
	editor $caddyfile
}

# See how we were called.
case $1 in
	'-start'|'start' )
		startcaddy;;
	'-stop'|'stop' )
		stopcaddy;;
	'-restart'|'restart'|'-reload'|'reload' )
		stopcaddy; sleep 1; startcaddy;;
	'-status'|'status' )
		caddystatus;;
	'-install'|'install' )
		amiroot; installcaddy; caddyfile;;
	'-update'|'update' )
		amiroot; updatecaddy; caddyfile;;
	'-fixphp'|'fixphp' )
		amiroot; fixphpfpm;;
	'-installphp'|'installphp' )
		amiroot; installphp;;
	'-edit'|'edit' )
		amiroot; editcaddyfile;;
	'-service'|'service' )
		amiroot; makeservice;;
	'-del'|'delete'|'-rm' )
		amiroot; deletecaddy;;
	'-about'|'about' )
		about;;
	'-h'|'help' )
		prms;;
	'-v'|'version'|'-version' )
		versioninfo;;
	*)
		caddystatus; howto;;
esac
exit 1
